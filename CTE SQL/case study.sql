/*queries that tells a story about the data*/
/*total number of orders by item*/

select distinct stockcode ,sum(quantity) over(partition by stockcode ) as num_of_oreders_per_item
from retail 
order by num_of_oreders_per_item desc;

-------------------------------------

/*total number of orders per customer*/

select distinct customer_id,
count(distinct invoice) over(partition by customer_id ) AS total_orders
from retail
order by total_orders desc;

-------------------------------------

/*total revenue generated by each customer*/

select distinct customer_id, 
sum(quantity * price)  over (partition by customer_id )AS total_revenue
from retail
order by total_revenue desc;

-------------------------------------

/*price of the sock is changing*/

select stockcode,price,invoicedate
from retail 
where stockcode='M';

-------------------------------------

/*Calculate the monthly revenue trend over time*/

select distinct extract(year from to_date(invoicedate, 'MM/DD/YYYY HH24:MI')) as yearr,
extract(month from to_date(invoicedate, 'MM/DD/YYYY HH24:MI')) as monthh,
sum(quantity * price) over (partition by extract(year from to_date(invoicedate, 'MM/DD/YYYY HH24:MI')), extract(month from to_date(invoicedate, 'MM/DD/YYYY HH24:MI'))) as monthly_revenue
from retail
order by monthly_revenue desc;

-------------------------------------

/* Calculate the customer churn rate*/

with last_purchase_dates as (
select distinct customer_id,
last_value(to_date(invoicedate, 'MM/DD/YYYY HH24:MI')) over (partition by customer_id) as last_pur_date
from retail
),
churn_metrics as (
 select count(distinct customer_id) as total_customers,
         sum(
           case
             when last_pur_date < to_date('12/30/2011 11:59:59 PM', 'MM/DD/YYYY HH12:MI:SS AM') - interval '2' month then 1
             else 0
           end
         ) AS churned_customers
 from last_purchase_dates
)
select total_customers,churned_customers,
round((churned_customers / total_customers)*100,2) as churn_rate
from churn_metrics;

-------------------------------------

/*Q2 segmenting customers*/

with cu_info as (
  select distinct customer_id,
    round(to_date('12/09/2011 12:20:00 PM', 'MM/DD/YYYY HH12:MI:SS AM') - last_value(to_date(InvoiceDate, 'MM/DD/YYYY HH24:MI')) over (partition by customer_id)) as recency,
    count(distinct invoice) over (partition by customer_id) as frequency,
    sum(quantity * price) over (partition by customer_id) as monetary
  from retail
),
scores as (
select distinct customer_id, recency,monetary,frequency,
ntile(5) over (order by recency) as rscore,
ntile(5) over (order by frequency) as fscore,
ntile(5) over (order by monetary) as mscore
from cu_info
),
fm as (
  select distinct customer_id, round((fscore + mscore) / 2) as fm_score
  from scores
),
finall as (
  select distinct s.customer_id,s.rscore ,f.fm_score,
    case
    when s.rscore = 5 and f.fm_score in (4, 5) then 'Champions'
    when s.rscore = 4 and f.fm_score = 5  then 'Champions'
    when s.rscore = 5 and f.fm_score = 2  then 'Potential Loyalists'
    when s.rscore = 4 and f.fm_score in (2, 3)  then 'Loyal Customers'
    when s.rscore = 3 and f.fm_score = 3  then 'Loyal Customers'
    when s.rscore = 5 and f.fm_score = 3  then 'Loyal Customers'
    when s.rscore = 4 and f.fm_score = 4  then 'Loyal Customers'
    when s.rscore = 3 and f.fm_score in (5, 4)  then 'Loyal Customers'
    when s.rscore = 5 and f.fm_score = 1  then 'Recent Customers'
    when s.rscore = 4 and f.fm_score = 1  then 'Promising'
    when s.rscore = 3 and f.fm_score = 1  then 'Promising'
    when s.rscore = 3 and f.fm_score = 2 then 'Customers Needing Attention'
    when s.rscore = 2 and f.fm_score = 3  then 'Customers Needing Attention'
    when s.rscore = 2 and f.fm_score = 2  then 'Customers Needing Attention'
    when s.rscore = 2 and f.fm_score in (4, 5)  then 'At Risk'
    when s.rscore = 1 and f.fm_score = 3  then 'At Risk'
    when s.rscore = 1 and f.fm_score in (4, 5)  then 'Cant Lose Them'
    when s.rscore = 1 and f.fm_score = 2 THEN 'Cant Lose Them'
    when s.rscore = 1 and f.fm_score = 1 THEN 'Cant Lose Them'
    else 'LOST'
    end as segmentation
  from fm f ,scores s
  where f.customer_id = s.customer_id
)
select distinct fi.customer_id,c.frequency, c.recency,c.monetary,fi.rscore,fi.fm_score,segmentation
from finall fi ,cu_info c
where fi.customer_id = c.customer_id


-------------------------------------

/*Q3A maximum number of consecutive days a customer made purchases*/

with cust_transactions as (
select cust_id, dt, lead(dt) over (partition by cust_id order by dt) as next_dt
from  transactions
), 
consecutive_days as (
select distinct Cust_id,count(*) over(partition by cust_id) as days
from cust_transactions 
where next_dt - dt = '1'
)
select Cust_id,  max(days) over(partition by cust_id) as maximum_consecutive_days 
from consecutive_days;

-------------------------------------

/*Q3B How many days/transactions on average does it take a customer to reach a spent threshold of 250 L.E*/

with ordered_transactions as (
select cust_id, dt, amt,
sum(amt) over (partition by cust_id order by dt) as total_amount,
row_number() over (partition by cust_id order by dt) as rn
from transactions
)
select avg(days_to_250)  as average_days_to_thresh
from (
select cust_id, min(rn) over(partition by cust_id) as  days_to_250
from ordered_transactions
where total_amount >= 250
)



























